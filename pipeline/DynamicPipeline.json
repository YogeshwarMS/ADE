{
	"name": "DynamicPipeline",
	"properties": {
		"activities": [
			{
				"name": "Lookup1",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": {
							"value": "SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE'\n",
							"type": "Expression"
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "AzureSqlparameterized",
						"type": "DatasetReference"
					},
					"firstRowOnly": false
				}
			},
			{
				"name": "ForEach1",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "Filter1",
						"dependencyConditions": [
							"Completed"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('Filter1').output.value",
						"type": "Expression"
					},
					"activities": [
						{
							"name": "Copy data1",
							"type": "Copy",
							"dependsOn": [
								{
									"activity": "Lookup2",
									"dependencyConditions": [
										"Completed"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "AzureSqlSource",
									"sqlReaderQuery": {
										"value": "@concat('SELECT * FROM ', item().TABLE_NAME, ' WHERE ', \n    if(contains(item().TABLE_NAME, 'Inventory'), 'InventoryID', \n        if(contains(item().TABLE_NAME, 'ProductDimension'), 'ProductID', \n            if(contains(item().TABLE_NAME, 'SupplierDimension'), 'SupplierID', \n                if(contains(item().TABLE_NAME, 'SupplierOrders'), 'SupplierID', 'DefaultColumnName')))), \n    ' > ', activity('Lookup2').output.firstRow.LastProcessedID)\n",
										"type": "Expression"
									},
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								},
								"sink": {
									"type": "DelimitedTextSink",
									"storeSettings": {
										"type": "AzureBlobFSWriteSettings"
									},
									"formatSettings": {
										"type": "DelimitedTextWriteSettings",
										"quoteAllText": true,
										"fileExtension": ".txt"
									}
								},
								"enableStaging": false,
								"translator": {
									"type": "TabularTranslator",
									"typeConversion": true,
									"typeConversionSettings": {
										"allowDataTruncation": true,
										"treatBooleanAsNumber": false
									}
								}
							},
							"inputs": [
								{
									"referenceName": "AzureSqlparameterized",
									"type": "DatasetReference"
								}
							],
							"outputs": [
								{
									"referenceName": "bonzelayer",
									"type": "DatasetReference",
									"parameters": {
										"filename": {
											"value": "@concat(item().TABLE_NAME,'.csv')",
											"type": "Expression"
										}
									}
								}
							]
						},
						{
							"name": "Lookup2",
							"type": "Lookup",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "AzureSqlSource",
									"sqlReaderQuery": {
										"value": "@concat('SELECT LastProcessedID FROM ETL_Metadata WHERE TableName = ''', item().TABLE_NAME, '''')\n",
										"type": "Expression"
									},
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								},
								"dataset": {
									"referenceName": "AzureSqlMetadata",
									"type": "DatasetReference"
								}
							}
						},
						{
							"name": "Stored procedure1",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [
								{
									"activity": "Copy data1",
									"dependencyConditions": [
										"Completed"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "[dbo].[SP_Update]",
								"storedProcedureParameters": {
									"TableName": {
										"value": {
											"value": "@item().TABLE_NAME",
											"type": "Expression"
										},
										"type": "String"
									},
									"IDColumn": {
										"value": {
											"value": "@if(contains(item().TABLE_NAME, 'Inventory'), 'InventoryID', \n        if(contains(item().TABLE_NAME, 'ProductDimension'), 'ProductID', \n            if(contains(item().TABLE_NAME, 'SupplierDimension'), 'SupplierID', \n                if(contains(item().TABLE_NAME, 'SupplierOrders'), 'SupplierID', 'DefaultColumnName'))))",
											"type": "Expression"
										},
										"type": "String"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "AzureSqlDatabaseYogesh",
								"type": "LinkedServiceReference"
							}
						}
					]
				}
			},
			{
				"name": "Filter1",
				"type": "Filter",
				"dependsOn": [
					{
						"activity": "Lookup1",
						"dependencyConditions": [
							"Completed"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('Lookup1').output.value",
						"type": "Expression"
					},
					"condition": {
						"value": "@not(or(equals(item().TABLE_NAME, 'PlantDimension'), equals(item().TABLE_NAME, 'ETL_Metadata')))\n",
						"type": "Expression"
					}
				}
			}
		],
		"variables": {
			"Test": {
				"type": "String"
			},
			"ID_Column": {
				"type": "String"
			}
		},
		"annotations": [],
		"lastPublishTime": "2024-12-09T11:13:32Z"
	},
	"type": "Microsoft.DataFactory/factories/pipelines"
}